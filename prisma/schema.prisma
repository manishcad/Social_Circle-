// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  emailVerified DateTime?
  password  String?
  image     String?
  accounts  Account[]
  sessions  Session[]
  followers Follower[] @relation("FollowerFollowee")
  following Follower[] @relation("FolloweeFollower")
  messagesSent    Message[] @relation("Sender")
  messagesReceived Message[] @relation("Receiver")
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  createdAt DateTime @default(now())
}

model Follower {
  id         String   @id @default(cuid())
  follower   User     @relation("FollowerFollowee", fields: [followerId], references: [id])
  followerId String
  followee   User     @relation("FolloweeFollower", fields: [followeeId], references: [id])
  followeeId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId])
}

model Message {
  id        String   @id @default(cuid())
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  content   String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
}

model Post {
  id        String   @id @default(cuid())
  title     String?
  content   String
  image     String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}
